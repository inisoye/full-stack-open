import express from 'express';
import { ParsedQs } from 'qs';
const app = express();

app.use(express.json());

import { calculateBmi } from './bmiCalculator';
import { calculateExercises } from './exerciseCalculator';

app.get('/hello', (_req, res) => {
  res.send('Hello Full Stack!');
});

app.get('/bmi', (req, res) => {
  const { weight, height } = req.query;

  // Params have an autogenerated type
  const isEmptyOrOfWrongType = (
    param: string | ParsedQs | string[] | ParsedQs[] | undefined
  ): boolean => {
    return !param || isNaN(Number(param));
  };

  if (isEmptyOrOfWrongType(weight) || isEmptyOrOfWrongType(height)) {
    res.status(400).send({
      error: 'malformatted parameters',
    });
  }

  res.json({
    weight: Number(weight),
    height: Number(height),
    bmi: calculateBmi(Number(height), Number(weight)),
  });
});

app.post('/exercises', (req, res) => {
  // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
  const { dailyExercises, target } = req.body;

  // Missing parameters
  if (!dailyExercises || !target) {
    res.status(400).send({
      error: 'parameters missing',
    });
  }

  // Daily exercises not array
  if (!Array.isArray(dailyExercises)) {
    res.status(400).send({
      error: 'malformatted parameters',
    });
  }

  const dailyExercisesArray = dailyExercises as [];
  const areAllExerciseValuesValid: boolean = dailyExercisesArray.every(
    (d: number) => !isNaN(Number(d))
  );
  const isTargetValid = !isNaN(Number(target));

  if (!areAllExerciseValuesValid && !isTargetValid) {
    res.status(400).send({
      error: 'malformatted parameters',
    });
  }

  const exercisesResult = calculateExercises(dailyExercises, target);

  res.send(exercisesResult);
});

const PORT = 3002;

app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
